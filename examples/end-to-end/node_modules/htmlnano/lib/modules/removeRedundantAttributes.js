"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = removeRedundantAttributes;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var redundantAttributes = {
  'form': {
    'method': 'get'
  },
  'input': {
    'type': 'text'
  },
  'button': {
    'type': 'submit'
  },
  'script': {
    'language': 'javascript',
    'type': 'text/javascript',
    // Remove attribute if the function returns false
    'charset': function charset(node) {
      // The charset attribute only really makes sense on “external” SCRIPT elements:
      // http://perfectionkills.com/optimizing-html/#8_script_charset
      return node.attrs && !node.attrs.src;
    }
  },
  'style': {
    'media': 'all',
    'type': 'text/css'
  },
  'link': {
    'media': 'all',
    'type': function type(node) {
      // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet
      var isRelStyleSheet = false;
      var isTypeTextCSS = false;

      if (node.attrs) {
        for (var _i = 0, _Object$entries = Object.entries(node.attrs); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              attrName = _Object$entries$_i[0],
              attrValue = _Object$entries$_i[1];

          if (attrName.toLowerCase() === 'rel' && attrValue === 'stylesheet') {
            isRelStyleSheet = true;
          }

          if (attrName.toLowerCase() === 'type' && attrValue === 'text/css') {
            isTypeTextCSS = true;
          }
        }
      } // Only "text/css" is redudant for link[rel=stylesheet]. Otherwise "type" shouldn't be removed


      return isRelStyleSheet && isTypeTextCSS;
    }
  }
};
var TAG_MATCH_REGEXP = new RegExp('^(' + Object.keys(redundantAttributes).join('|') + ')$');
/** Removes redundant attributes */

function removeRedundantAttributes(tree) {
  tree.match({
    tag: TAG_MATCH_REGEXP
  }, function (node) {
    var tagRedundantAttributes = redundantAttributes[node.tag];
    node.attrs = node.attrs || {};

    for (var _i2 = 0, _Object$keys = Object.keys(tagRedundantAttributes); _i2 < _Object$keys.length; _i2++) {
      var redundantAttributeName = _Object$keys[_i2];
      var tagRedundantAttributeValue = tagRedundantAttributes[redundantAttributeName];
      var isRemove = false;

      if (typeof tagRedundantAttributeValue === 'function') {
        isRemove = tagRedundantAttributeValue(node);
      } else if (node.attrs[redundantAttributeName] === tagRedundantAttributeValue) {
        isRemove = true;
      }

      if (isRemove) {
        delete node.attrs[redundantAttributeName];
      }
    }

    return node;
  });
  return tree;
}